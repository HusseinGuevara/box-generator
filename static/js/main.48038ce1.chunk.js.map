{"version":3,"sources":["components/Display.js","components/BoxGenerator.js","App.js","reportWebVitals.js","index.js"],"names":["Display","props","console","log","boxes","map","box","idx","style","backgroundColor","color","width","dimentions","height","display","margin","border","BoxGenerator","useState","setColor","setDimentions","setBoxes","onSubmit","e","preventDefault","newBox","copyBoxes","push","htmlFor","id","onChange","target","value","type","name","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAkBeA,EAfC,SAACC,GAEb,OADAC,QAAQC,IAAIF,EAAMG,OAEd,8BAGIH,EAAMG,MAAMC,KAAI,SAACC,EAAIC,GACjB,OAAO,qBAAKC,MAAO,CAAEC,gBAAgBH,EAAII,MAAOC,MAAML,EAAIM,WAAW,KAAMC,OAAOP,EAAIM,WAAW,KAAKE,QAAQ,eAAgBC,OAAO,OAAQC,OAAO,oBAA0BT,SCuC/KU,EA/CM,SAAChB,GAClB,MAA0BiB,mBAAS,IAAnC,mBAAOR,EAAP,KAAcS,EAAd,KACA,EAAoCD,mBAAS,IAA7C,mBAAON,EAAP,KAAmBQ,EAAnB,KACA,EAA0BF,mBAAS,IAAnC,mBAAOd,EAAP,KAAciB,EAAd,KAkBA,OACI,gDAII,uBAAMC,SArBO,SAACC,GAClBA,EAAEC,iBACF,IAAMC,EAAS,CACXf,MAAOA,EACPE,WAAYA,GAGhBV,QAAQC,IAAI,gBAAiBsB,GAC7B,IAAMC,EAAS,YAAOtB,GACtBsB,EAAUC,KAAKF,GACfJ,EAASK,IAWL,UACI,uBAAOE,QAAQ,QAAf,qBACA,uBAAOC,GAAG,QAAQC,SAAW,SAACP,GAAD,OAAOJ,EAASI,EAAEQ,OAAOC,QAASC,KAAK,OAAOC,KAAK,UAEhF,uBAAON,QAAQ,aAAf,0BACA,uBAAOC,GAAG,QAAQC,SAAW,SAACP,GAAD,OAAOH,EAAcG,EAAEQ,OAAOC,QAASC,KAAK,OAAOC,KAAK,eACrF,wBAASD,KAAK,SAASD,MAAO,iBAA9B,uBAKJ,uBACJ,cAAC,EAAD,CAAS5B,MAASA,QC1BX+B,MATf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.48038ce1.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\n\r\nconst Display = (props) => {\r\n    console.log(props.boxes)\r\n    return (\r\n        <div>\r\n\r\n        {\r\n            props.boxes.map((box,idx)=>{\r\n                return <div style={{ backgroundColor:box.color, width:box.dimentions+\"px\", height:box.dimentions+\"px\",display:\"inline-block\", margin:\"10px\", border:\"1px solid black\"}} key={ idx }></div>\r\n            })\r\n        }\r\n        </div>\r\n    );\r\n    \r\n};\r\n\r\nexport default Display;","import React, {useState} from \"react\";\r\nimport Display from './Display';\r\nconst BoxGenerator = (props) => {\r\n    const [color, setColor] = useState(\"\");\r\n    const [dimentions, setDimentions] = useState(\"\");\r\n    const [boxes, setBoxes] = useState([]);\r\n    \r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const newBox = { \r\n            color: color,\r\n            dimentions: dimentions,\r\n\r\n        };\r\n        console.log(\"My new box is\", newBox);\r\n        const copyBoxes = [...boxes];    \r\n        copyBoxes.push(newBox);\r\n        setBoxes(copyBoxes);\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    return(\r\n        <div>\r\n            \r\n            Create A Box!    \r\n            \r\n            <form onSubmit = { handleSubmit }>\r\n                <label htmlFor=\"color\">Color: </label>\r\n                <input id=\"input\" onChange={ (e) => setColor(e.target.value) } type=\"text\" name=\"color\" />\r\n                \r\n                <label htmlFor=\"dimentions\">Dimentions: </label>\r\n                <input id=\"input\" onChange={ (e) => setDimentions(e.target.value) } type=\"text\" name=\"dimentions\" />\r\n                <button  type=\"submit\" value={\"Box Dimentions\"}>Create</button>\r\n            </form>       \r\n            {/* <p>color:{JSON.stringify(color)}</p>\r\n            <p>dimentions:{JSON.stringify(dimentions)}</p>\r\n            <p>boxesArray:{JSON.stringify(boxes)}</p> */}\r\n            <hr/>\r\n        <Display boxes = {boxes}/>\r\n        </div>\r\n            \r\n\r\n        \r\n        \r\n    );\r\n};\r\n\r\nexport default BoxGenerator;","import React from \"react\";\nimport './App.css';\nimport BoxGenerator from './components/BoxGenerator';\nimport Display from \"./components/Display\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BoxGenerator/>\n      {/* <Display/> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}