{"version":3,"sources":["components/Display.js","components/BoxGenerator.js","App.js","reportWebVitals.js","index.js"],"names":["Display","props","console","log","boxes","map","box","idx","style","borderRadius","radius","backgroundColor","color","width","height","display","margin","border","BoxGenerator","useState","setColor","seHeight","setWidth","setRadius","setBoxes","className","onSubmit","e","preventDefault","newBox","copyBoxes","push","placeholder","id","onChange","target","value","type","name","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAkBeA,EAfC,SAACC,GAEb,OADAC,QAAQC,IAAIF,EAAMG,OAEd,8BAGIH,EAAMG,MAAMC,KAAI,SAACC,EAAIC,GACjB,OAAO,qBAAKC,MAAO,CAAEC,aAAaH,EAAII,OAAO,KAAOC,gBAAgBL,EAAIM,MAAOC,MAAMP,EAAIO,MAAM,KAAMC,OAAOR,EAAIQ,OAAO,KAAKC,QAAQ,eAAgBC,OAAO,OAAQC,OAAO,oBAA0BV,SC2DrMW,EAnEM,SAACjB,GAClB,MAA0BkB,mBAAS,IAAnC,mBAAOP,EAAP,KAAcQ,EAAd,KACA,EAA2BD,mBAAS,IAApC,mBAAOL,EAAP,KAAeO,EAAf,KACA,EAA0BF,mBAAS,IAAnC,mBAAON,EAAP,KAAcS,EAAd,KACA,EAA6BH,mBAAS,IAAtC,mBAAOT,EAAP,KAAea,EAAf,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOf,EAAP,KAAcoB,EAAd,KAoBA,OACI,gCACI,sBAAKC,UAAU,gCAAf,UACI,gEACA,uBAAMC,SAtBG,SAACC,GAClBA,EAAEC,iBACF,IAAMC,EAAS,CACXjB,MAAOA,EACPC,MAAOA,EACPC,OAAQA,EACRJ,OAAQA,GAGZR,QAAQC,IAAI,gBAAiB0B,GAC7B,IAAMC,EAAS,YAAO1B,GACtB0B,EAAUC,KAAKF,GACfL,EAASM,IAUD,UAEI,qBAAKL,UAAU,aAAf,SAEI,uBAAOO,YAAY,QAAQP,UAAU,eAAeQ,GAAG,QAAQC,SAAW,SAACP,GAAD,OAAOP,EAASO,EAAEQ,OAAOC,QAASC,KAAK,OAAOC,KAAK,YAGjI,qBAAKb,UAAU,aAAf,SAEI,uBAAOO,YAAY,SAASP,UAAU,eAAeQ,GAAG,QAAQC,SAAW,SAACP,GAAD,OAAON,EAASM,EAAEQ,OAAOC,QAASC,KAAK,OAAOC,KAAK,aAGlI,qBAAKb,UAAU,aAAf,SAEI,uBAAOO,YAAY,QAAQP,UAAU,eAAeQ,GAAG,QAAQC,SAAW,SAACP,GAAD,OAAOL,EAASK,EAAEQ,OAAOC,QAASC,KAAK,OAAOC,KAAK,YAGjI,qBAAKb,UAAU,aAAf,SAEI,uBAAOO,YAAY,mCAAmCP,UAAU,eAAeQ,GAAG,QAAQC,SAAW,SAACP,GAAD,OAAOJ,EAAUI,EAAEQ,OAAOC,QAASC,KAAK,OAAOC,KAAK,aAG7J,wBAAQb,UAAU,6CAA8CY,KAAK,SAASD,MAAO,iBAArF,0BAOZ,cAAC,EAAD,CAAShC,MAASA,QC9CXmC,MATf,WACE,OACE,qBAAKd,UAAU,MAAf,SACE,cAAC,EAAD,OCISe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e9a084de.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\n\r\nconst Display = (props) => {\r\n    console.log(props.boxes)\r\n    return (\r\n        <div>\r\n\r\n        {\r\n            props.boxes.map((box,idx)=>{\r\n                return <div style={{ borderRadius:box.radius+\"px\" , backgroundColor:box.color, width:box.width+\"px\", height:box.height+\"px\",display:\"inline-block\", margin:\"10px\", border:\"1px solid black\"}} key={ idx }></div>\r\n            })\r\n        }\r\n        </div>\r\n    );\r\n    \r\n};\r\n\r\nexport default Display;","import React, {useState} from \"react\";\r\nimport Display from './Display';\r\nconst BoxGenerator = (props) => {\r\n    const [color, setColor] = useState(\"\");\r\n    const [height, seHeight] = useState(\"\");\r\n    const [width, setWidth] = useState(\"\");\r\n    const [radius, setRadius ] = useState(\"\");\r\n    const [boxes, setBoxes] = useState([]);\r\n    \r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const newBox = { \r\n            color: color,\r\n            width: width,\r\n            height: height,\r\n            radius: radius\r\n\r\n        };\r\n        console.log(\"My new box is\", newBox);\r\n        const copyBoxes = [...boxes];    \r\n        copyBoxes.push(newBox);\r\n        setBoxes(copyBoxes);\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    return(\r\n        <div>\r\n            <div className=\"w-80 mx-auto mt-1 p-2 rounded\">\r\n                <h6>Create A Box, Circle, or Oval!</h6>    \r\n                <form onSubmit = { handleSubmit }>\r\n                    \r\n                    <div className=\"form-group\">\r\n                        {/* <label className=\"h6\" htmlFor=\"color\">Color: </label> */}\r\n                        <input placeholder=\"Color\" className=\"form-control\" id=\"input\" onChange={ (e) => setColor(e.target.value) } type=\"text\" name=\"color\" />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        {/* <label className=\"h6\" htmlFor=\"dimentions\">Dimensions: </label> */}\r\n                        <input placeholder=\"Height\" className=\"form-control\" id=\"input\" onChange={ (e) => seHeight(e.target.value) } type=\"text\" name=\"height\" />\r\n                    </div>\r\n                    \r\n                    <div className=\"form-group\">\r\n                        {/* <label className=\"h6\" htmlFor=\"dimentions\">Dimensions: </label> */}\r\n                        <input placeholder=\"Width\" className=\"form-control\" id=\"input\" onChange={ (e) => setWidth(e.target.value) } type=\"text\" name=\"width\" />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        {/* <label className=\"h6\" htmlFor=\"radius\">Border Radius (Enter A Number Between 0 to 100 to Round Out Corners): </label> */}\r\n                        <input placeholder=\"Border Radius Enter Number 0-100\" className=\"form-control\" id=\"input\" onChange={ (e) => setRadius(e.target.value) } type=\"text\" name=\"radius\" />\r\n                    </div>\r\n                    \r\n                    <button className=\"btn btn-outline-secondary btn-lg w-50 mt-2\"  type=\"submit\" value={\"Box Dimentions\"}>Create</button>\r\n                </form>\r\n            </div>           \r\n            {/* <p>color:{JSON.stringify(color)}</p>\r\n            <p>dimentions:{JSON.stringify(dimentions)}</p>\r\n            <p>boxesArray:{JSON.stringify(boxes)}</p> */}\r\n            {/* <hr/> */}\r\n        <Display boxes = {boxes}/> \r\n        </div>\r\n            \r\n\r\n        \r\n        \r\n    );\r\n};\r\n\r\nexport default BoxGenerator;","import React from \"react\";\nimport './App.css';\nimport BoxGenerator from './components/BoxGenerator';\nimport Display from \"./components/Display\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BoxGenerator/>\n      {/* <Display/> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}